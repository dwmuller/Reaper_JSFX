desc: Stereo Looper with MIDI control
// tags: processing MIDI sampler
// author: Dan Muller

// Inspired by Super8 and Moebius.

in_pin: input 1
in_pin: input 2
out_pin: output 1
out_pin: output 2

slider1:param_midi_bus=1<1,16,1>MIDI bus
slider2:param_midi_channel=0<0,16,1{Any,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16}>MIDI channel

@init
// The @init section is executed when the effect is loaded, when
// the audio sample rate changes, or when Reaper starts playing.
//
// Looper playing is distinct from Reaper playing. The looper can
// play even when Reaper is stopped. However, when Reaper starts playing,
// all memory is zeroed and this section runs again.
//
// Functions defined in @init can be used by other sections.

ext_midi_bus = 1.0; // Enable Reaper MIDI bus support

// Audio processing states
ST_EMPTY = 0;
ST_RECORDING = 1;
ST_PLAYING = 2;
ST_PAUSED = 3;
g_state = ST_EMPTY;

// Events
EV_RECORD_TOGGLE  = 0; // Record->Play
EV_PAUSE_TOGGLE   = 1; // Pause->Continue
EV_RESTART_TOGGLE = 2; // Pause->Restart
EV_RESET          = 3; // Reset to empty
// g_user_event_count = 4;
EV_LOOP_END = 64;      // Internal, never enqueued, immediate.

// TODO:
// Serialize configuration settings.
// Input control configuration (ugh)
// Quantizing
//   Quantize to loop is easy but only somewhat useful.
//   Better quantizing requires determining a beat and resolution.
//   Requires enqueuing events.
// Multiply recording
//   Record buffer size unknown, handle memory exhaustion dynamically.
//   Record len can exceed loop len, frame index modulo loop len -> remainder is
//   play frame index.
//   Needs a separate toggle event. Interaction with regular recording state?
//   Is this a new state, or a substate of recording?
//   Best to think of this as the default, single-loop recording special
//   substate. 
// Variable size layers
//   Store offset and len at start of each layer.
//   Layer sample retrieval more complex.
//   Recording start stores offset.
// Undo/redo
//   Discard redo buffs when new recording starts.
// Feedback/fadeout
//   Discarding faded-out layers is difficult - may have to treat layer
//   audio memory as circular? Leading layers can die while playing or
//   recording.
// Trim
//   AKA alternate form of multiply recording.
//   Need a new toggle event. Interaction with regular multiply?
//   Is this a new state, or a substate of multiply?
// Long-press actions, e.g. for reset.
//   Not clear how to do this. Need to recognize a MIDI command pair and timing
//   between them.



// Memory organization
//
// We can record multiple layers so that we can undo overdubs.
//
// The loop audio is a sequence of "layer" buffers. The last layer buffer is
// the recording buffer. Each layer buffer has some prefix data, followed by
// a sequence of frames. A frame is a sequence of samples, one for each 
// channel. The recording layer always takes up all remaining memory, and is
// truncated when saved.
//
g_audio_mem_start = 0;  // Start of loop audio buffer memory.
g_audio_mem_end = __memtop();

// The layer prefix consists of:
// - Count of the frames in the buffer.
// - Start, which is how many frames into the loop this layer was recorded.
// - Loop length, in frames, after this layer was saved.
LAYER_PREFIX_SIZE = 3;

// Because this anemic language has no notion of arrays or other multi-value
// object, we have to build such in the general memory. We allocate that space
// at the beginning of memory.

// A buffer in which to compose the output of all layers for all channels.
g_frame_buff = g_audio_mem_start;
g_audio_mem_start += num_ch;


// Map of MIDI commands to user-generated events. For ease of lookup, each
// MIDI channel voice command is stored as a status byte value (with zero
// channel), and a byte value. We never care about the possible third byte.
// The index into this array is the event number.
/*
g_user_event_map = g_audio_mem_start;
g_audio_mem_start += g_user_event_count*2;
*/

// Queue of pending events.
/*
g_event_queue = g_audio_mem_start;
g_event_queue_max_len = 16;
g_audio_mem_start += g_event_queue_max_len;
g_event_queue_len = 0;
*/

// Utilities
function is_running() (
    (g_state != ST_EMPTY) && (g_state != ST_PAUSED);
);


// Layer accessors
function get_next_layer(layer) (
    ptr + floor((layer[0]*num_ch)+LAYER_PREFIX_SIZE);
);
function get_layers_end() local(layer) (
    layer = g_layers_start;
    loop(g_layers_count, layer=get_next_layer(layer));
    layer;
);

// State transition action support
function try_start_recording() local(ptr) (
    ptr = get_layers_end();

    // Make sure we have room for at least the prefix.
    ((g_audio_mem_end - ptr) >= LAYER_PREFIX_SIZE) ? (
        // Set up a layer prefix.
        ptr[0] = 0;
        ptr[1] = g_frame_idx;
        ptr[2] = g_loop_frame_count;
        g_recording_layer = ptr;
        this.layer = g_recording_layer;
        // TODO: Overwrite undone, inactive layers.
        1;
    ) : (
        0; // return false, no memory!!
    );
);
function save_layer() local(frame_count) (
    // The recording buffer, which appears after the last layer buffer (if
    // any), becomes a layer buffer.
    // Returns false if there are no layers after trying to save.

    frame_count = g_frame_idx - g_recording_layer[1];

    frame_count ? (
        // If this will be the first layer, set the loop length
        // to its audio length.
        !g_layers_count ? (g_loop_frame_count = g_frame_idx);

        g_recording_layer[0] = frame_count;
        g_recording_layer[2] = g_loop_frame_count;
        g_recording_layer = -1; // No recording layer.
        g_layers_count+=1;
    );
    g_layers_count != 0;
);
function pause() (
    // Does nothing. Associated state change causes frame index to stop
    // incrementing.
    1;
);
function reset() (
    // Zero out anything that might have been touched. Caller should
    // make sure that we're not recording, we don't clear and
    // active recording layer.
    memset(g_layers_start, 0, get_layers_end()-g_layers_start);

    // Layer buffer management
    g_layers_start = g_audio_mem_start;
    g_layers_count = 0;  // Active (playable) layers.

    // Loop length and frame position management
    g_loop_frame_count = 0;
    g_frame_idx = 0;
);
function try_save_else_reset() (
    save_layer();
    (g_layers_count == 0) ? (
        reset();
        0;
    ) : (
        1;
    );
);
function continue() (
    // Does nothing. Associated state change causes frame index to continue
    // incrementing.
    1;
);
function restart() (
    // Associated state change causes frame index to start incrementing.
    g_frame_idx = 0;
    1;
);

reset();

// Given a current state and an event, possibly change states and perform
// actions. This function embodies the entire state machine of the looper's
// audio engine.
function handle_event(evt) (
/*
    Model for a new clause, with all events:
    (ST_? == g_state) ? (
        (EV_RECORD_TOGGLE == evt) ? (do() ? ST_RECORDING : g_state) :
        (EV_PAUSE_TOGGLE == evt) ? (do(); ST_PAUSED) :
        (EV_RESTART_TOGGLE == evt) ? (do(); ST_PAUSED) :
        (EV_RESET == evt) ? (reset(); ST_EMPTY) :
        (EV_LOOP_END == evt) ? () :
        g_state;
    ) :
*/
    g_state = 
        (ST_EMPTY == g_state) ? (
            (EV_RECORD_TOGGLE == evt) ? (try_start_recording() ? ST_RECORDING : g_state) :
            g_state;
        ) :
        (ST_RECORDING == g_state) ? (
            (EV_RECORD_TOGGLE == evt) ? (
                try_save_else_reset() ? ST_PLAYING : ST_EMPTY) :
            (EV_PAUSE_TOGGLE == evt) ? (
                try_save_else_reset() ? (pause(); ST_PAUSED;) : ST_EMPTY) :
            (EV_RESTART_TOGGLE == evt) ? (
                try_save_else_reset() ? (pause(); ST_PAUSED;) : ST_EMPTY) :
            (EV_RESET == evt) ? (save_layer(); reset(); ST_EMPTY;) :
            (EV_LOOP_END == evt) ? (
                save_layer(); 
                // TODO: Notify of memory exhaustion.
                try_start_recording() ? ST_RECORDING : (pause(); ST_PAUSED)
            ) :
            g_state;
        ) :
        (ST_PLAYING == g_state) ? (
            (EV_RECORD_TOGGLE == evt) ? (try_start_recording() ? ST_RECORDING : g_state) :
            (EV_PAUSE_TOGGLE == evt) ? (pause(); ST_PAUSED) :
            (EV_RESTART_TOGGLE == evt) ? (pause(); ST_PAUSED) :
            (EV_RESET == evt) ? (reset(); ST_EMPTY) :
            g_state;
        ) :
        (ST_PAUSED == g_state) ? (
            (EV_RECORD_TOGGLE== evt) ? (try_start_recording() ? ST_RECORDING : g_state) :
            (EV_PAUSE_TOGGLE == evt) ? (continue(); ST_PLAYING;) :
            (EV_RESTART_TOGGLE == evt) ? (restart(); ST_PLAYING;) :
            (EV_RESET == evt) ? (reset(); ST_EMPTY;) :
            g_state;
        ) : (
            // Unknown initial state. WTF?
            g_state;
        );
);
function handle_input_event(evt) (
    this.last_evt = evt; // assists debugging
    handle_event(evt);
);

@serialize
1; // Need this section to be non-empty.

@slider
midi_bus = param_midi_bus-1; // sets system variable
g_midi_chan_idx = param_midi_channel-1; // Users see number, code uses index

@block
// Code in this section is executed when each block of samples is received
// from the input. Then, @sample is executed for each sample in the block.
// MIDI processing is typically done here, although it can also be done
// in @sample.

// Process all MIDI commands, each of which consists of up to three bytes.
while (midirecv(offset,m1,m2,m3)) (
    (m1 >= 0x80) && (m1 < 0xF0) ? (
        // Examine a channel voice message
        midi_chan_idx = m1 & 0x0F;
        midi_status = m1 & 0xF0;
        midi_value = m2;
        (-1 /* omni */ == g_midi_chan_idx || midi_chan_idx == g_midi_chan_idx) ? (
            // We're either in OMNI mode or it's to our MIDI channel.

            // TODO: Stupid simple command recognition right now.
            // TODO: No quantization (or cmd queue growth)
            (midi_status == 0xC0 /* PC */) ? handle_input_event(midi_value);
        );
    );
    // We pass all MIDI messages through.
    midisend(offset, m1, m2,m3);
)

@sample
// Code in this section gets executed once for each audio sample.
// Sample are spl(n), where n is the input channel index. They can be modified.
// num_ch is the number of channels - typically 2, left and right.

function try_append_layer_frame(frame) local(ptr) (
    ptr = layer + LAYER_PREFIX_SIZE + g_recording_layer[0]*num_ch;
    ((g_audio_mem_end - num_ch) > ptr) ? (
        memcpy(ptr, frame, num_ch);
        g_recording_layer[0] += 1;
        1;
    ) : (
        0;
    );
);
function add_layer_frame(layer, frame) local(frame_idx, ptr, chan) (
    frame_idx = (g_frame_idx % layer[2]) - layer[1];
    (frame_idx >= 0 && frame_idx < layer[0]) ? (
        ptr = layer + LAYER_PREFIX_SIZE + (frame_idx*num_ch);
        chan = 0;
        loop(num_ch, frame[chan] += ptr[chan]; chan+=1);
    );
);
function get_layers_frame(frame) local(layer) (
    // Add the current samples from each layer to the output.
    layer = g_layers_start;
    loop(g_layers_count,
        add_layer_frame(layer, frame);
        layer = get_next_layer(layer);
    );
);
function rcv_frame(frame) local(chan) (
    chan = 0;
    loop(num_ch, frame[chan] = spl(chan); chan += 1);
);
function send_frame(frame) local(chan) (
    chan = 0;
    loop(num_ch, spl(chan) = frame[chan]; chan += 1);
);
function clear_frame(frame) (
    memset(frame, 0, num_ch);
);

// TODO: Need a specific event for memory exhaustion.
(ST_RECORDING == g_state) ? (
    rcv_frame(g_frame_buff);
    !try_append_layer_frame(g_frame_buff) ? 
        handle_input_event(EV_PAUSE_TOGGLE);
);

// If we allowed monitoring, we'd skip this.
clear_frame(g_frame_buff);

is_running() ? get_layers_frame(g_frame_buff);

send_frame(g_frame_buff);

is_running() ? (
    // Increment the frame index on every @sample call if we're not
    // stopped. If we've reached the end of the loop, signal loop end
    // and wrap.
    g_frame_idx += 1;
    (g_layers_count && (g_frame_idx >= g_loop_frame_count)) ? (
        g_frame_idx = 0;
        handle_event(EV_LOOP_END);
    );
);

