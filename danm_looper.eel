desc: Stereo Looper with MIDI control
// tags: processing MIDI sampler
// author: Dan Muller

// This is a looper effect with MIDI control.
//
// Features/limitations:
//   Records a single loop.
//      Use multiple Reaper tracks to implement multiple loops.
//   Overdubs are record as distinct layers.
//   When overdub reaches end of loop, a new layer is started.
//   Layers can be "undone" and "redone", in order.
//   Starting a new recording or overdub discards all saved layers.
//   Input audio is not passed to output; only loop audio is.
//      Use Reaper track routing to monitor and mix with loops.
//
//
// Commands and the (currently fixed) MIDI commands that invoke them:
//   RECORD (toggle)     PC 1  starts/stop recording a layer
//   UNDO                PC 2  mutes and saves last recorded layer
//   PAUSE (toggle)      PC 3  pauses playback, or continues where paused
//   RESTART (toggle)    PC 4  pauses playback, or starts from beginning
//   REDO                PC 5  unmutes the last undone layer
//   RESET               PC 6  discards all audio, including saved layers
//
// Configuration parameters:
//   Reaper MIDI bus number
//   MIDI control channel.

// Inspired by Super8 and Mobius.
// Terminology and layer mgmt inspired directly by Mobius.

options: maxmem=8388608

in_pin: input 1
in_pin: input 2
out_pin: output 1
out_pin: output 2

slider1:param_midi_bus=1<1,16,1>MIDI bus
slider2:param_midi_channel=0<0,16,1{Any,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16}>MIDI channel

@init
// The @init section is executed when the effect is loaded, when
// the audio sample rate changes, or when Reaper starts playing.
//
// Looper playing is distinct from Reaper playing. The looper can
// play even when Reaper is stopped. However, when Reaper starts playing,
// all memory is zeroed and this section runs again.
//
// Functions defined in @init can be used by other sections.

ext_midi_bus = 1.0; // Enable Reaper MIDI bus support

// Audio processing states
_st_EMPTY = 1;
_st_PAUSED = 2;
_st_PLAYING = 3;
_st_RECORDING = 4;
engine_state = _st_EMPTY;

// Input events
_inp_RECORD_TOGGLE  = 1; // Record->Play
_inp_UNDO           = 2;
_inp_PAUSE_TOGGLE   = 3; // Pause->Continue
_inp_RESTART_TOGGLE = 4; // Pause->Restart
_inp_REDO           = 5;
_inp_RESET          = 6; // Reset to empty
// g_user_event_count = 6;

// Internal events
_evt_LOOP_END = 20;      // Internal, never enqueued, immediate.

// Additional feature ideas
//
// UI
//   Loop position, start pulse
//   Layers active, saved
//   Approx. audio memory remaining.
//   Could maybe show all this on one bar? Worth trying.
//   Reaper is apparently popular with blind users, arguing against a GUI. Could
//   the needed indicators be supplied (first, anyway) using std sliders? I'm
//   sure there's much more to making disability-friendly effects, but it might
//   be a start.
//   Also see jsfx-ui-lib.
// Quantizing
//   Quantize to loop is easy but only somewhat useful.
//   Better quantizing requires determining a beat and resolution.
//   Requires enqueuing events.
// Multiply recording
//   Record buffer size unknown, handle memory exhaustion dynamically.
//   Record len can exceed loop len, frame index modulo loop len -> remainder is
//   play frame index.
//   Needs a separate toggle event. Interaction with regular recording state?
//   Is this a new state, or a substate of recording?
//   Best to think of this as the default, single-loop recording special
//   substate. 
// Play once
//   aka stop at loop end.
// Variable size layers
//   Store offset and len at start of each layer.
//   Layer sample retrieval more complex.
//   Recording start stores offset.
// Undo/redo
//   Discard redo buffs when new recording starts.
// Feedback/fadeout
//   Discarding faded-out layers is difficult - may have to treat layer
//   audio memory as circular? Leading layers can die while playing or
//   recording.
// Trim
//   AKA alternate form of multiply recording.
//   Need a new toggle event. Interaction with regular multiply?
//   Is this a new state, or a substate of multiply?
// Long-press actions, e.g. for reset.
//   Not clear how to do this. Need to recognize a MIDI command pair and timing
//   between them.
// Configurable channel count
//   Mute/unmute channels could allow for new techniques, but all channels are
//   in same loop and have same saved layer stack.
// Reaper transport integration?
//   Set ext_noinit to avoid loss of loop when transport starts.
//   Allow copy loop to Reaper track/take.
//   Explore synchronization with time signature.
// Input control configuration (ugh)
//   Lack of this can be worked around with configurable control sources and
//   other Reaper MIDI fx.
// Serialization
//   Sliders are saved and restored automatically.
//   Consider saving and restoring loop audio.
// Soul searching
//   Is this really a worthwhile approach to looping in Reaper, or would it
//   be better to manipulate audio and takes/layers using track-level
//   automation?
// Channels
//   Making # of channels adaptable. Code is set up for it.

// Code improvement ideas.
//
// Eliminate EMPTY state?
//   Its only advantage is in a slight reduction of computing activity when a
//   loop is empty.


// Memory organization
//
// We can record multiple layers so that we can undo overdubs.
//
// The loop audio is a sequence of "layer" buffers. The last layer buffer is
// the recording buffer. Each layer buffer has some prefix data, followed by
// a sequence of frames. A frame is a sequence of samples, one for each 
// channel. The recording layer always takes up all remaining memory, and is
// truncated when saved.
//
mem_audio_begin = 0;  // Start of loop audio buffer memory.
mem_audio_end = __memtop();

// The layer prefix consists of:
// - Count of the frames in the buffer.
// - Start, which is how many frames into the loop this layer was recorded.
// - Loop length, in frames, after this layer was saved.
_LAYER_PREFIX_SIZE = 3;

// Because this anemic language has no notion of arrays or other multi-value
// object, we have to build such in the general memory. We allocate that space
// at the beginning of memory. The rest of memory is reserved for the
// ever-changing collection of layers and the recording buffer.

// A buffer in which to compose the output of all layers for all channels.
mem_frame_buff = mem_audio_begin;
mem_audio_begin += num_ch;


// Map of MIDI commands to user-generated events. For ease of lookup, each
// MIDI channel voice command is stored as a status byte value (with zero
// channel), and a byte value. We never care about the possible third byte.
// The index into this array is the event number.
/*
g_user_event_map = mem_audio_begin;
mem_audio_begin += g_user_event_count*2;
*/

// Queue of pending events.
/*
g_event_queue = mem_audio_begin;
g_event_queue_max_len = 16;
mem_audio_begin += g_event_queue_max_len;
g_event_queue_len = 0;
*/

// Engine state
//
// engine_loop_len is the current loop length. It is the number of frames in a
// loop. When recording, it may be increased. A layer may be shorter than the
// current loop length, in which case the missing frames are implied zero.
//
// engine_frame_idx is the index of the next frame within the loop to store
// and/or play. It also indicates the number of frames that have been played in
// a loop since the beginning of the last iteration, and the number of frames
// that have been recorded since the last start of the loop (although the
// recording layer's offset may imply empty frames, which are not explicitly
// stored).
//
// engine_state is the state of the loop, which determines how the code responds
// to events, and how engine_frame_idx advances.
//
// engine_recording_layer points to a layer in which input samples are being
// gathered.


// Utilities
function is_running() (
    (engine_state != _st_EMPTY) && (engine_state != _st_PAUSED);
);
function debug_layer(layer) (
    this.layer = layer;
    this.len = this.layer[0];
    this.begin = this.layer[1];
    this.loop_len = this.layer[2];
);

// Layer accessors
function get_layer_size(layer) (
    floor((layer[0]*num_ch)+_LAYER_PREFIX_SIZE)
);
function get_next_layer(layer) (
    layer + floor((layer[0]*num_ch)+_LAYER_PREFIX_SIZE);
);
function get_last_active_layer() local(layer) (
    (layers_active_count > 0) ? (
        layer = layers_begin;
        loop(layers_active_count-1, layer=get_next_layer(layer));
        layer;
    ) : 0;
);

// State transition action support
function try_start_recording() local(ptr) (
    ptr = layers_saved;

    // Make sure we have room for at least the prefix.
    ((mem_audio_end - ptr) >= _LAYER_PREFIX_SIZE) ? (
        // Set up a layer prefix.
        ptr[0] = 0;
        ptr[1] = engine_frame_idx;
        ptr[2] = engine_loop_len;
        // Discard any saved layers:
        layers_saved_count = 0;
        layers_end = layers_saved;
        // Adjust engine running state. Since we may have discarded some 
        // layers, the loop length may shrink to whatever the last active
        // layer was using as a loop length.
        engine_recording_layer = ptr;
        engine_loop_len = ((ptr=get_last_active_layer()) ? ptr[2] : 0);
        1;
    ) : 0 // return false, no memory!!
);
function save_recording() local(frame_count) (
    // The recording buffer, which appears after the last layer buffer (if
    // any), becomes a layer buffer.
    // Returns true if the layer was saved, false if it was discarded.

    frame_count = engine_frame_idx - engine_recording_layer[1];

    frame_count ? (
        // Layer's frame count was kept up to date while recording.
        // Layer's start offset was set when recording began.
        engine_recording_layer[2] = engine_loop_len;
        layers_active_count+=1;
        layers_end += get_layer_size(engine_recording_layer);
        layers_saved = layers_end;
        engine_recording_layer = -1; // No recording layer.
        1;
    ) : 0
);
function discard_recording() local(layer) (
    (engine_recording_layer != -1) ? (
        memset(engine_recording_layer, 0, engine_recording_layer[0]*num_ch);
        engine_recording_layer = -1;
        // Depending on recording mode, the loop length may have grown during
        // recording. Reset to the loop length recorded in the last active
        // layer.
        engine_loop_len = ((layer = get_last_active_layer()) ? layer[2] : 0);
        1;
    ) : 0
);
function pause() (
    // Does nothing. Associated state change causes frame index to stop
    // incrementing.
    1;
);
function reset() (
    // Zero out anything that might have been touched. 
    discard_recording();
    memset(layers_begin, 0, layers_end-layers_begin);

    // Layer buffer management
    layers_begin = layers_saved = layers_end = mem_audio_begin;
    layers_active_count = layers_saved_count = 0;

    // Loop length and frame position management
    engine_loop_len = 0;  // In frames
    engine_frame_idx = 0; // Index of frame currently playing/recording.
    1;
);
function continue() (
    // Does nothing. Associated state change causes frame index to continue
    // incrementing.
    1;
);
function restart() (
    // Associated state change causes frame index to start incrementing.
    engine_frame_idx = 0;
    1;
);
function undo() local(layer, s_layer) (
    (layer = get_last_active_layer()) ? (
        layers_active_count -= 1;
        layers_saved -= get_layer_size(layer);
        layers_saved_count += 1;

        // Note that we leave the loop length alone. The multiply function
        // can extend a loop length in multiples, so we may end up with a
        // loop length longer than expected by the active layers, but that's
        // fine. If we start recording, we will adjust the loop length to 
        // what the last active layer had.
        //
        // We also do not adjust the engine's frame index. In effect, undone
        // layers are muted, but the engine continues cycling through them.
    );
    1;
);
function redo() local(layer) (
    layers_saved_count ? (
        layer = layers_saved;
        layers_saved_count -= 1;
        layers_saved += get_layer_size(layer);
        layers_active_count += 1;
        1;
    ) : 0;
);

reset();

// Given a current state and an event, possibly change states and perform
// actions. This function embodies the entire state machine of the looper's
// audio engine_
function handle_event(evt) (
/*
    Model for a new clause, with all events:
        (_st_? == engine_state) ? (
            (_inp_RECORD_TOGGLE == evt) ? (do() ? _st_RECORDING : engine_state) :
            (_inp_PAUSE_TOGGLE == evt) ? (do(); _st_PAUSED) :
            (_inp_RESTART_TOGGLE == evt) ? (do(); _st_PAUSED) :
            (_inp_RESET == evt) ? (reset(); _st_EMPTY) :
            (_inp_UNDO == evt) ? (undo(); layers_active_count ? _st_EMPTY : g_state) :
            (_inp_REDO == evt) ? (redo(); layers_active_count ? _st_EMPTY : g_state) :
            (_evt_LOOP_END == evt) ? () :
            engine_state;
        ) :
    */
    engine_state = 
        (_st_EMPTY == engine_state) ? (
            (_inp_RECORD_TOGGLE == evt) ? (try_start_recording() ? _st_RECORDING : _st_EMPTY) :
            _st_EMPTY;
        ) :
        (_st_RECORDING == engine_state) ? (
            (_inp_RECORD_TOGGLE == evt) ? (save_recording(); _st_PLAYING) :
            (_inp_PAUSE_TOGGLE == evt) ? (
                save_recording();
                pause();
                _st_PAUSED;) :
            (_inp_RESTART_TOGGLE == evt) ? (
                save_recording();
                pause();
                _st_PAUSED) :
            (_inp_RESET == evt) ? (reset(); _st_EMPTY) :
            (_inp_UNDO == evt) ? (discard_recording(); _st_PLAYING) :
            (_inp_REDO == evt) ? (discard_recording(); _st_PLAYING) :
            (_evt_LOOP_END == evt) ? (
                layers_active_count ? (
                    save_recording();
                    engine_frame_idx = 0;
                    // TODO: Notify of memory exhaustion.
                    try_start_recording()
                    ? _st_RECORDING
                    : (pause(); _st_PAUSED)
                ) : (
                    // Recording first layer; extend the loop.
                    engine_loop_len += 1;
                    _st_RECORDING
                )
            ) :
            _st_RECORDING;
        ) :
        (_st_PLAYING == engine_state) ? (
            (_inp_RECORD_TOGGLE == evt) ? (try_start_recording() ? _st_RECORDING : _st_PLAYING) :
            (_inp_PAUSE_TOGGLE == evt) ? (pause(); _st_PAUSED) :
            (_inp_RESTART_TOGGLE == evt) ? (pause(); _st_PAUSED) :
            (_inp_RESET == evt) ? (reset(); _st_EMPTY) :
            (_inp_UNDO == evt) ? (undo(); _st_PLAYING) :
            (_inp_REDO == evt) ? (redo(); _st_PLAYING) :
            (_evt_LOOP_END == evt) ? (engine_frame_idx = 0; _st_PLAYING) :
            _st_PLAYING;
        ) :
        (_st_PAUSED == engine_state) ? (
            (_inp_RECORD_TOGGLE== evt) ? (try_start_recording() ? _st_RECORDING : _st_PAUSED) :
            (_inp_PAUSE_TOGGLE == evt) ? (continue(); _st_PLAYING;) :
            (_inp_RESTART_TOGGLE == evt) ? (restart(); _st_PLAYING;) :
            (_inp_RESET == evt) ? (reset(); _st_EMPTY;) :
            (_inp_UNDO == evt) ? (undo(); _st_PAUSED) :
            (_inp_REDO == evt) ? (redo(); _st_PAUSED) :
            _st_PAUSED;
        ) : (
            // Unknown initial state. WTF?
            engine_state;
        );
);
function handle_input_event(evt) (
    Debug.last_input_evt = evt; // assists debugging
    handle_event(evt);
);

@serialize
1; // Need this section to be non-empty.

@slider
midi_bus = param_midi_bus-1; // sets system variable
midi_input_chan_idx = param_midi_channel-1; // Users see number, code uses index

@block
// Code in this section is executed when each block of samples is received
// from the input. Then, @sample is executed for each sample in the block.
// MIDI processing is typically done here, although it can also be done
// in @sample.


function handle_midi() local(offset,m1,m2,m3,chan_idx,status,value) (
    while (midirecv(offset,m1,m2,m3)) (
        (m1 >= 0x80) && (m1 < 0xF0) ? (
            // Examine a channel voice message
            chan_idx = m1 & 0x0F;
            status = m1 & 0xF0;
            value = m2;
            (-1 /* omni */ == midi_input_chan_idx || chan_idx == midi_input_chan_idx) ? (
                // We're either in OMNI mode or it's to our MIDI channel.

                // TODO: Stupid simple command recognition right now.
                // TODO: No quantization (or cmd queue growth)
                (status == 0xC0 /* PC */) ? handle_input_event(value+1);
            );
        );
        // We pass all MIDI messages through.
        midisend(offset,m1,m2,m3);
    );
);

// Process all MIDI commands, each of which consists of up to three bytes.
handle_midi();

@sample
// Code in this section gets executed once for each audio sample.
// Sample are spl(n), where n is the input channel index. They can be modified.
// num_ch is the number of channels - typically 2, left and right.

function try_append_layer_frame(frame) local(ptr) (
    ptr = engine_recording_layer + _LAYER_PREFIX_SIZE + engine_recording_layer[0]*num_ch;
    ((mem_audio_end - num_ch) > ptr) ? (
        memcpy(ptr, frame, num_ch);
        engine_recording_layer[0] += 1;
        1;
    ) : (
        0;
    );
);
function add_layer_frame(layer, frame) local(frame_idx, ptr, chan) (
    frame_idx = (engine_frame_idx % layer[2]) - layer[1];
    (frame_idx >= 0 && frame_idx < layer[0]) ? (
        ptr = layer + _LAYER_PREFIX_SIZE + (frame_idx*num_ch);
        chan = 0;
        loop(num_ch, frame[chan] += ptr[chan]; chan+=1);
    );
);
function get_layers_frame(frame) local(layer) (
    // Add the current samples from each layer to the output.
    layer = layers_begin;
    loop(layers_active_count,
        add_layer_frame(layer, frame);
        layer = get_next_layer(layer);
    );
);
function rcv_frame(frame) local(chan) (
    chan = 0;
    loop(num_ch, frame[chan] = spl(chan); chan += 1);
);
function send_frame(frame) local(chan) (
    chan = 0;
    loop(num_ch, spl(chan) = frame[chan]; chan += 1);
);
function clear_frame(frame) (
    memset(frame, 0, num_ch);
);

is_running() ? (
    // Increment the frame index on every @sample call if we're not
    // stopped. If we've reached the end of the loop, signal loop end
    // and wrap.
    (engine_frame_idx >= engine_loop_len) ? (
        handle_event(_evt_LOOP_END);
    );
);
// TODO: Need a specific event for memory exhaustion.
(_st_RECORDING == engine_state) ? (
    rcv_frame(mem_frame_buff);
    !try_append_layer_frame(mem_frame_buff) ? 
        handle_input_event(_inp_PAUSE_TOGGLE);
);

// If we allowed monitoring, we'd skip this.
clear_frame(mem_frame_buff);

is_running() ? get_layers_frame(mem_frame_buff);

send_frame(mem_frame_buff);

is_running() ? (
    // Increment the frame index on every @sample call if we're not
    // stopped. If we've reached the end of the loop, signal loop end
    // and wrap.
    engine_frame_idx += 1;
);

